// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pwas/model"
)

func newAppUserLoginLog(db *gorm.DB, opts ...gen.DOOption) appUserLoginLog {
	_appUserLoginLog := appUserLoginLog{}

	_appUserLoginLog.appUserLoginLogDo.UseDB(db, opts...)
	_appUserLoginLog.appUserLoginLogDo.UseModel(&model.AppUserLoginLog{})

	tableName := _appUserLoginLog.appUserLoginLogDo.TableName()
	_appUserLoginLog.ALL = field.NewAsterisk(tableName)
	_appUserLoginLog.ID = field.NewInt64(tableName, "id")
	_appUserLoginLog.UserID = field.NewString(tableName, "user_id")
	_appUserLoginLog.Status = field.NewString(tableName, "status")
	_appUserLoginLog.PromotionURL = field.NewString(tableName, "promotion_url")
	_appUserLoginLog.ChannelID = field.NewString(tableName, "channel_id")
	_appUserLoginLog.CreatedAt = field.NewTime(tableName, "created_at")
	_appUserLoginLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appUserLoginLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_appUserLoginLog.fillFieldMap()

	return _appUserLoginLog
}

type appUserLoginLog struct {
	appUserLoginLogDo

	ALL          field.Asterisk
	ID           field.Int64 // 自增id
	UserID       field.String
	Status       field.String
	PromotionURL field.String
	ChannelID    field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (a appUserLoginLog) Table(newTableName string) *appUserLoginLog {
	a.appUserLoginLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appUserLoginLog) As(alias string) *appUserLoginLog {
	a.appUserLoginLogDo.DO = *(a.appUserLoginLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appUserLoginLog) updateTableName(table string) *appUserLoginLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.UserID = field.NewString(table, "user_id")
	a.Status = field.NewString(table, "status")
	a.PromotionURL = field.NewString(table, "promotion_url")
	a.ChannelID = field.NewString(table, "channel_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *appUserLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appUserLoginLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["status"] = a.Status
	a.fieldMap["promotion_url"] = a.PromotionURL
	a.fieldMap["channel_id"] = a.ChannelID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a appUserLoginLog) clone(db *gorm.DB) appUserLoginLog {
	a.appUserLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appUserLoginLog) replaceDB(db *gorm.DB) appUserLoginLog {
	a.appUserLoginLogDo.ReplaceDB(db)
	return a
}

type appUserLoginLogDo struct{ gen.DO }

type IAppUserLoginLogDo interface {
	gen.SubQuery
	Debug() IAppUserLoginLogDo
	WithContext(ctx context.Context) IAppUserLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppUserLoginLogDo
	WriteDB() IAppUserLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppUserLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppUserLoginLogDo
	Not(conds ...gen.Condition) IAppUserLoginLogDo
	Or(conds ...gen.Condition) IAppUserLoginLogDo
	Select(conds ...field.Expr) IAppUserLoginLogDo
	Where(conds ...gen.Condition) IAppUserLoginLogDo
	Order(conds ...field.Expr) IAppUserLoginLogDo
	Distinct(cols ...field.Expr) IAppUserLoginLogDo
	Omit(cols ...field.Expr) IAppUserLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo
	Group(cols ...field.Expr) IAppUserLoginLogDo
	Having(conds ...gen.Condition) IAppUserLoginLogDo
	Limit(limit int) IAppUserLoginLogDo
	Offset(offset int) IAppUserLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppUserLoginLogDo
	Unscoped() IAppUserLoginLogDo
	Create(values ...*model.AppUserLoginLog) error
	CreateInBatches(values []*model.AppUserLoginLog, batchSize int) error
	Save(values ...*model.AppUserLoginLog) error
	First() (*model.AppUserLoginLog, error)
	Take() (*model.AppUserLoginLog, error)
	Last() (*model.AppUserLoginLog, error)
	Find() ([]*model.AppUserLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppUserLoginLog, err error)
	FindInBatches(result *[]*model.AppUserLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppUserLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppUserLoginLogDo
	Assign(attrs ...field.AssignExpr) IAppUserLoginLogDo
	Joins(fields ...field.RelationField) IAppUserLoginLogDo
	Preload(fields ...field.RelationField) IAppUserLoginLogDo
	FirstOrInit() (*model.AppUserLoginLog, error)
	FirstOrCreate() (*model.AppUserLoginLog, error)
	FindByPage(offset int, limit int) (result []*model.AppUserLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppUserLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appUserLoginLogDo) Debug() IAppUserLoginLogDo {
	return a.withDO(a.DO.Debug())
}

func (a appUserLoginLogDo) WithContext(ctx context.Context) IAppUserLoginLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appUserLoginLogDo) ReadDB() IAppUserLoginLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a appUserLoginLogDo) WriteDB() IAppUserLoginLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a appUserLoginLogDo) Session(config *gorm.Session) IAppUserLoginLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a appUserLoginLogDo) Clauses(conds ...clause.Expression) IAppUserLoginLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appUserLoginLogDo) Returning(value interface{}, columns ...string) IAppUserLoginLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appUserLoginLogDo) Not(conds ...gen.Condition) IAppUserLoginLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appUserLoginLogDo) Or(conds ...gen.Condition) IAppUserLoginLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appUserLoginLogDo) Select(conds ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appUserLoginLogDo) Where(conds ...gen.Condition) IAppUserLoginLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appUserLoginLogDo) Order(conds ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appUserLoginLogDo) Distinct(cols ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appUserLoginLogDo) Omit(cols ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appUserLoginLogDo) Join(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appUserLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appUserLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appUserLoginLogDo) Group(cols ...field.Expr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appUserLoginLogDo) Having(conds ...gen.Condition) IAppUserLoginLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appUserLoginLogDo) Limit(limit int) IAppUserLoginLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appUserLoginLogDo) Offset(offset int) IAppUserLoginLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appUserLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppUserLoginLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appUserLoginLogDo) Unscoped() IAppUserLoginLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appUserLoginLogDo) Create(values ...*model.AppUserLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appUserLoginLogDo) CreateInBatches(values []*model.AppUserLoginLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appUserLoginLogDo) Save(values ...*model.AppUserLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appUserLoginLogDo) First() (*model.AppUserLoginLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppUserLoginLog), nil
	}
}

func (a appUserLoginLogDo) Take() (*model.AppUserLoginLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppUserLoginLog), nil
	}
}

func (a appUserLoginLogDo) Last() (*model.AppUserLoginLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppUserLoginLog), nil
	}
}

func (a appUserLoginLogDo) Find() ([]*model.AppUserLoginLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppUserLoginLog), err
}

func (a appUserLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppUserLoginLog, err error) {
	buf := make([]*model.AppUserLoginLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appUserLoginLogDo) FindInBatches(result *[]*model.AppUserLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appUserLoginLogDo) Attrs(attrs ...field.AssignExpr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appUserLoginLogDo) Assign(attrs ...field.AssignExpr) IAppUserLoginLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appUserLoginLogDo) Joins(fields ...field.RelationField) IAppUserLoginLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appUserLoginLogDo) Preload(fields ...field.RelationField) IAppUserLoginLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appUserLoginLogDo) FirstOrInit() (*model.AppUserLoginLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppUserLoginLog), nil
	}
}

func (a appUserLoginLogDo) FirstOrCreate() (*model.AppUserLoginLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppUserLoginLog), nil
	}
}

func (a appUserLoginLogDo) FindByPage(offset int, limit int) (result []*model.AppUserLoginLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appUserLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appUserLoginLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appUserLoginLogDo) Delete(models ...*model.AppUserLoginLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appUserLoginLogDo) withDO(do gen.Dao) *appUserLoginLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
