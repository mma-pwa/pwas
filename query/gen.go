// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	App             *app
	AppCustomURL    *appCustomURL
	AppSubUser      *appSubUser
	AppUserLoginLog *appUserLoginLog
	User            *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	App = &Q.App
	AppCustomURL = &Q.AppCustomURL
	AppSubUser = &Q.AppSubUser
	AppUserLoginLog = &Q.AppUserLoginLog
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		App:             newApp(db, opts...),
		AppCustomURL:    newAppCustomURL(db, opts...),
		AppSubUser:      newAppSubUser(db, opts...),
		AppUserLoginLog: newAppUserLoginLog(db, opts...),
		User:            newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	App             app
	AppCustomURL    appCustomURL
	AppSubUser      appSubUser
	AppUserLoginLog appUserLoginLog
	User            user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		App:             q.App.clone(db),
		AppCustomURL:    q.AppCustomURL.clone(db),
		AppSubUser:      q.AppSubUser.clone(db),
		AppUserLoginLog: q.AppUserLoginLog.clone(db),
		User:            q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		App:             q.App.replaceDB(db),
		AppCustomURL:    q.AppCustomURL.replaceDB(db),
		AppSubUser:      q.AppSubUser.replaceDB(db),
		AppUserLoginLog: q.AppUserLoginLog.replaceDB(db),
		User:            q.User.replaceDB(db),
	}
}

type queryCtx struct {
	App             IAppDo
	AppCustomURL    IAppCustomURLDo
	AppSubUser      IAppSubUserDo
	AppUserLoginLog IAppUserLoginLogDo
	User            IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		App:             q.App.WithContext(ctx),
		AppCustomURL:    q.AppCustomURL.WithContext(ctx),
		AppSubUser:      q.AppSubUser.WithContext(ctx),
		AppUserLoginLog: q.AppUserLoginLog.WithContext(ctx),
		User:            q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
