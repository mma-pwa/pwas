// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pwas/model"
)

func newAppCustomURL(db *gorm.DB, opts ...gen.DOOption) appCustomURL {
	_appCustomURL := appCustomURL{}

	_appCustomURL.appCustomURLDo.UseDB(db, opts...)
	_appCustomURL.appCustomURLDo.UseModel(&model.AppCustomURL{})

	tableName := _appCustomURL.appCustomURLDo.TableName()
	_appCustomURL.ALL = field.NewAsterisk(tableName)
	_appCustomURL.ID = field.NewInt64(tableName, "id")
	_appCustomURL.AppID = field.NewString(tableName, "app_id")
	_appCustomURL.CustomURL = field.NewString(tableName, "custom_url")
	_appCustomURL.Status = field.NewInt32(tableName, "status")
	_appCustomURL.CreatedAt = field.NewTime(tableName, "created_at")
	_appCustomURL.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appCustomURL.DeletedAt = field.NewField(tableName, "deleted_at")

	_appCustomURL.fillFieldMap()

	return _appCustomURL
}

type appCustomURL struct {
	appCustomURLDo

	ALL       field.Asterisk
	ID        field.Int64 // 自增id
	AppID     field.String
	CustomURL field.String
	Status    field.Int32 // Url当前状态，0为正常，1为关闭
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (a appCustomURL) Table(newTableName string) *appCustomURL {
	a.appCustomURLDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appCustomURL) As(alias string) *appCustomURL {
	a.appCustomURLDo.DO = *(a.appCustomURLDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appCustomURL) updateTableName(table string) *appCustomURL {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AppID = field.NewString(table, "app_id")
	a.CustomURL = field.NewString(table, "custom_url")
	a.Status = field.NewInt32(table, "status")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *appCustomURL) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appCustomURL) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["custom_url"] = a.CustomURL
	a.fieldMap["status"] = a.Status
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a appCustomURL) clone(db *gorm.DB) appCustomURL {
	a.appCustomURLDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appCustomURL) replaceDB(db *gorm.DB) appCustomURL {
	a.appCustomURLDo.ReplaceDB(db)
	return a
}

type appCustomURLDo struct{ gen.DO }

type IAppCustomURLDo interface {
	gen.SubQuery
	Debug() IAppCustomURLDo
	WithContext(ctx context.Context) IAppCustomURLDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppCustomURLDo
	WriteDB() IAppCustomURLDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppCustomURLDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppCustomURLDo
	Not(conds ...gen.Condition) IAppCustomURLDo
	Or(conds ...gen.Condition) IAppCustomURLDo
	Select(conds ...field.Expr) IAppCustomURLDo
	Where(conds ...gen.Condition) IAppCustomURLDo
	Order(conds ...field.Expr) IAppCustomURLDo
	Distinct(cols ...field.Expr) IAppCustomURLDo
	Omit(cols ...field.Expr) IAppCustomURLDo
	Join(table schema.Tabler, on ...field.Expr) IAppCustomURLDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppCustomURLDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppCustomURLDo
	Group(cols ...field.Expr) IAppCustomURLDo
	Having(conds ...gen.Condition) IAppCustomURLDo
	Limit(limit int) IAppCustomURLDo
	Offset(offset int) IAppCustomURLDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppCustomURLDo
	Unscoped() IAppCustomURLDo
	Create(values ...*model.AppCustomURL) error
	CreateInBatches(values []*model.AppCustomURL, batchSize int) error
	Save(values ...*model.AppCustomURL) error
	First() (*model.AppCustomURL, error)
	Take() (*model.AppCustomURL, error)
	Last() (*model.AppCustomURL, error)
	Find() ([]*model.AppCustomURL, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppCustomURL, err error)
	FindInBatches(result *[]*model.AppCustomURL, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppCustomURL) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppCustomURLDo
	Assign(attrs ...field.AssignExpr) IAppCustomURLDo
	Joins(fields ...field.RelationField) IAppCustomURLDo
	Preload(fields ...field.RelationField) IAppCustomURLDo
	FirstOrInit() (*model.AppCustomURL, error)
	FirstOrCreate() (*model.AppCustomURL, error)
	FindByPage(offset int, limit int) (result []*model.AppCustomURL, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppCustomURLDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appCustomURLDo) Debug() IAppCustomURLDo {
	return a.withDO(a.DO.Debug())
}

func (a appCustomURLDo) WithContext(ctx context.Context) IAppCustomURLDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appCustomURLDo) ReadDB() IAppCustomURLDo {
	return a.Clauses(dbresolver.Read)
}

func (a appCustomURLDo) WriteDB() IAppCustomURLDo {
	return a.Clauses(dbresolver.Write)
}

func (a appCustomURLDo) Session(config *gorm.Session) IAppCustomURLDo {
	return a.withDO(a.DO.Session(config))
}

func (a appCustomURLDo) Clauses(conds ...clause.Expression) IAppCustomURLDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appCustomURLDo) Returning(value interface{}, columns ...string) IAppCustomURLDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appCustomURLDo) Not(conds ...gen.Condition) IAppCustomURLDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appCustomURLDo) Or(conds ...gen.Condition) IAppCustomURLDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appCustomURLDo) Select(conds ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appCustomURLDo) Where(conds ...gen.Condition) IAppCustomURLDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appCustomURLDo) Order(conds ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appCustomURLDo) Distinct(cols ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appCustomURLDo) Omit(cols ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appCustomURLDo) Join(table schema.Tabler, on ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appCustomURLDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appCustomURLDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appCustomURLDo) Group(cols ...field.Expr) IAppCustomURLDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appCustomURLDo) Having(conds ...gen.Condition) IAppCustomURLDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appCustomURLDo) Limit(limit int) IAppCustomURLDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appCustomURLDo) Offset(offset int) IAppCustomURLDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appCustomURLDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppCustomURLDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appCustomURLDo) Unscoped() IAppCustomURLDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appCustomURLDo) Create(values ...*model.AppCustomURL) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appCustomURLDo) CreateInBatches(values []*model.AppCustomURL, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appCustomURLDo) Save(values ...*model.AppCustomURL) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appCustomURLDo) First() (*model.AppCustomURL, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCustomURL), nil
	}
}

func (a appCustomURLDo) Take() (*model.AppCustomURL, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCustomURL), nil
	}
}

func (a appCustomURLDo) Last() (*model.AppCustomURL, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCustomURL), nil
	}
}

func (a appCustomURLDo) Find() ([]*model.AppCustomURL, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppCustomURL), err
}

func (a appCustomURLDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppCustomURL, err error) {
	buf := make([]*model.AppCustomURL, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appCustomURLDo) FindInBatches(result *[]*model.AppCustomURL, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appCustomURLDo) Attrs(attrs ...field.AssignExpr) IAppCustomURLDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appCustomURLDo) Assign(attrs ...field.AssignExpr) IAppCustomURLDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appCustomURLDo) Joins(fields ...field.RelationField) IAppCustomURLDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appCustomURLDo) Preload(fields ...field.RelationField) IAppCustomURLDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appCustomURLDo) FirstOrInit() (*model.AppCustomURL, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCustomURL), nil
	}
}

func (a appCustomURLDo) FirstOrCreate() (*model.AppCustomURL, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCustomURL), nil
	}
}

func (a appCustomURLDo) FindByPage(offset int, limit int) (result []*model.AppCustomURL, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appCustomURLDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appCustomURLDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appCustomURLDo) Delete(models ...*model.AppCustomURL) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appCustomURLDo) withDO(do gen.Dao) *appCustomURLDo {
	a.DO = *do.(*gen.DO)
	return a
}
