// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pwas/model"
)

func newAppSubUser(db *gorm.DB, opts ...gen.DOOption) appSubUser {
	_appSubUser := appSubUser{}

	_appSubUser.appSubUserDo.UseDB(db, opts...)
	_appSubUser.appSubUserDo.UseModel(&model.AppSubUser{})

	tableName := _appSubUser.appSubUserDo.TableName()
	_appSubUser.ALL = field.NewAsterisk(tableName)
	_appSubUser.ID = field.NewInt64(tableName, "id")
	_appSubUser.AppID = field.NewString(tableName, "app_id")
	_appSubUser.UserID = field.NewString(tableName, "user_id")
	_appSubUser.SubInfo = field.NewString(tableName, "sub_info")
	_appSubUser.CreatedAt = field.NewTime(tableName, "created_at")
	_appSubUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appSubUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_appSubUser.fillFieldMap()

	return _appSubUser
}

type appSubUser struct {
	appSubUserDo

	ALL       field.Asterisk
	ID        field.Int64 // 自增id
	AppID     field.String
	UserID    field.String
	SubInfo   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (a appSubUser) Table(newTableName string) *appSubUser {
	a.appSubUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appSubUser) As(alias string) *appSubUser {
	a.appSubUserDo.DO = *(a.appSubUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appSubUser) updateTableName(table string) *appSubUser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AppID = field.NewString(table, "app_id")
	a.UserID = field.NewString(table, "user_id")
	a.SubInfo = field.NewString(table, "sub_info")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *appSubUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appSubUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["sub_info"] = a.SubInfo
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a appSubUser) clone(db *gorm.DB) appSubUser {
	a.appSubUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appSubUser) replaceDB(db *gorm.DB) appSubUser {
	a.appSubUserDo.ReplaceDB(db)
	return a
}

type appSubUserDo struct{ gen.DO }

type IAppSubUserDo interface {
	gen.SubQuery
	Debug() IAppSubUserDo
	WithContext(ctx context.Context) IAppSubUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppSubUserDo
	WriteDB() IAppSubUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppSubUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppSubUserDo
	Not(conds ...gen.Condition) IAppSubUserDo
	Or(conds ...gen.Condition) IAppSubUserDo
	Select(conds ...field.Expr) IAppSubUserDo
	Where(conds ...gen.Condition) IAppSubUserDo
	Order(conds ...field.Expr) IAppSubUserDo
	Distinct(cols ...field.Expr) IAppSubUserDo
	Omit(cols ...field.Expr) IAppSubUserDo
	Join(table schema.Tabler, on ...field.Expr) IAppSubUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppSubUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppSubUserDo
	Group(cols ...field.Expr) IAppSubUserDo
	Having(conds ...gen.Condition) IAppSubUserDo
	Limit(limit int) IAppSubUserDo
	Offset(offset int) IAppSubUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppSubUserDo
	Unscoped() IAppSubUserDo
	Create(values ...*model.AppSubUser) error
	CreateInBatches(values []*model.AppSubUser, batchSize int) error
	Save(values ...*model.AppSubUser) error
	First() (*model.AppSubUser, error)
	Take() (*model.AppSubUser, error)
	Last() (*model.AppSubUser, error)
	Find() ([]*model.AppSubUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppSubUser, err error)
	FindInBatches(result *[]*model.AppSubUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppSubUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppSubUserDo
	Assign(attrs ...field.AssignExpr) IAppSubUserDo
	Joins(fields ...field.RelationField) IAppSubUserDo
	Preload(fields ...field.RelationField) IAppSubUserDo
	FirstOrInit() (*model.AppSubUser, error)
	FirstOrCreate() (*model.AppSubUser, error)
	FindByPage(offset int, limit int) (result []*model.AppSubUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppSubUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appSubUserDo) Debug() IAppSubUserDo {
	return a.withDO(a.DO.Debug())
}

func (a appSubUserDo) WithContext(ctx context.Context) IAppSubUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appSubUserDo) ReadDB() IAppSubUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a appSubUserDo) WriteDB() IAppSubUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a appSubUserDo) Session(config *gorm.Session) IAppSubUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a appSubUserDo) Clauses(conds ...clause.Expression) IAppSubUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appSubUserDo) Returning(value interface{}, columns ...string) IAppSubUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appSubUserDo) Not(conds ...gen.Condition) IAppSubUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appSubUserDo) Or(conds ...gen.Condition) IAppSubUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appSubUserDo) Select(conds ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appSubUserDo) Where(conds ...gen.Condition) IAppSubUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appSubUserDo) Order(conds ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appSubUserDo) Distinct(cols ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appSubUserDo) Omit(cols ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appSubUserDo) Join(table schema.Tabler, on ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appSubUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appSubUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appSubUserDo) Group(cols ...field.Expr) IAppSubUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appSubUserDo) Having(conds ...gen.Condition) IAppSubUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appSubUserDo) Limit(limit int) IAppSubUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appSubUserDo) Offset(offset int) IAppSubUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appSubUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppSubUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appSubUserDo) Unscoped() IAppSubUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appSubUserDo) Create(values ...*model.AppSubUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appSubUserDo) CreateInBatches(values []*model.AppSubUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appSubUserDo) Save(values ...*model.AppSubUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appSubUserDo) First() (*model.AppSubUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppSubUser), nil
	}
}

func (a appSubUserDo) Take() (*model.AppSubUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppSubUser), nil
	}
}

func (a appSubUserDo) Last() (*model.AppSubUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppSubUser), nil
	}
}

func (a appSubUserDo) Find() ([]*model.AppSubUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppSubUser), err
}

func (a appSubUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppSubUser, err error) {
	buf := make([]*model.AppSubUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appSubUserDo) FindInBatches(result *[]*model.AppSubUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appSubUserDo) Attrs(attrs ...field.AssignExpr) IAppSubUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appSubUserDo) Assign(attrs ...field.AssignExpr) IAppSubUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appSubUserDo) Joins(fields ...field.RelationField) IAppSubUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appSubUserDo) Preload(fields ...field.RelationField) IAppSubUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appSubUserDo) FirstOrInit() (*model.AppSubUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppSubUser), nil
	}
}

func (a appSubUserDo) FirstOrCreate() (*model.AppSubUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppSubUser), nil
	}
}

func (a appSubUserDo) FindByPage(offset int, limit int) (result []*model.AppSubUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appSubUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appSubUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appSubUserDo) Delete(models ...*model.AppSubUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appSubUserDo) withDO(do gen.Dao) *appSubUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
